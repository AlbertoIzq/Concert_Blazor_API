@page "/song-requests"
@using Concert.Business
@using Concert.Business.Models.View
@using Microsoft.AspNetCore.Components.QuickGrid;
@using Concert.Business.Constants;
@using Data;

<PageTitle>Song requests</PageTitle>

@using Microsoft.AspNetCore.Components.QuickGrid;

@inject IWebApiExecuter WebApiExecuter
@inject IToastService ToastService

<h3>Song requests</h3>
<br />
@if(!string.IsNullOrEmpty(errorMessage))
{
    <div>
        <p class="text-danger">@errorMessage</p>
    </div>  
}
else if(songRequests is null)
{
    <div>
        <p><em>Loading...</em></p>
    </div>
}
else
{
    <div class="row">
        <div class="page-size-chooser col-2">
            Items per page:
            <select @bind="@paginationState.ItemsPerPage">
                <option>@FrontConstants.SONGREQUEST_ITEMS_PER_PAGE_OPTION_1</option>
                <option>@FrontConstants.SONGREQUEST_ITEMS_PER_PAGE_OPTION_2</option>
                <option>@FrontConstants.SONGREQUEST_ITEMS_PER_PAGE_OPTION_3</option>
            </select>
        </div>
        <div class="page-size-chooser col-2">
            <a href="/song-request" class="btn btn-primary">
                <i class="bi bi-plus-square"></i> Add Song request
            </a>
        </div>
    </div>
    <div class="grid">
        <QuickGrid Items="songRequests.AsQueryable()" Pagination="paginationState">
            <PropertyColumn Property="s => s.Artist" Sortable="true" IsDefaultSortColumn="true"></PropertyColumn>
            <PropertyColumn Property="s => s.Title" Sortable="true"></PropertyColumn>
            <PropertyColumn Property="s => s.Genre" Sortable="true"></PropertyColumn>
            <PropertyColumn Property="s => s.Language" Sortable="true"></PropertyColumn>
            <TemplateColumn>
                <a href="/song-request/@context.Id" class="btn btn-primary">
                    <i class="bi bi-pencil-square"></i> Edit
                </a>
            </TemplateColumn>
            <TemplateColumn>
                <ChildContent Context="songRequest">
                    <EditForm Model="songRequest"
                    FormName="@($"form-song-request-{songRequest.Id}")"
                    OnValidSubmit="@(async () => { await Delete(songRequest.Id); })">
                        <button type="submit" class="btn btn-danger">
                            <i class="bi bi-trash3"></i> Delete
                        </button>
                    </EditForm>
                </ChildContent>
            </TemplateColumn>
        </QuickGrid>
    </div>
    <Paginator State="paginationState"></Paginator>
} 

@code {
    [CascadingParameter]
    public IModalService ModalService { get; set; }

    private List<SongRequestView>? songRequests;
    private string? errorMessage = string.Empty;

    private PaginationState paginationState = new PaginationState { ItemsPerPage = FrontConstants.SONGREQUEST_ITEMS_PER_PAGE_OPTION_1 };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetAll();
        }
    }

    private async Task Delete(int id)
    {
        try
        {
            if (id > 0)
            {
                var result = await ShowModal();
                if (result.Confirmed)
                {
                    await WebApiExecuter.InvokeDelete($"song-requests/{id}");
                    ToastService.ShowSuccess("SongRequest deleted successfully");
                    // Used to refresh the page
                    await GetAll();
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task GetAll()
    {
        try
        {
            songRequests = await WebApiExecuter.InvokeGet<List<SongRequestView>>("song-requests");
            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task<ModalResult> ShowModal()
    {
        var modalOptions = new ModalOptions() { HideCloseButton = true }; // Hides the "X" button

        var modalParameters = new ModalParameters();
        var title = "Are you sure?";
        modalParameters.Add("Message", "You won't be able to revert this!");
        modalParameters.Add("ConfirmButton", "Yes, delete it");
        modalParameters.Add("CancelButton", "Cancel");

        var modal = ModalService.Show<ConfirmationModalComponent>(title, modalParameters, modalOptions);
        return await modal.Result;
    }
}