@page "/song-requests"
@using Concert.Business
@using Concert.Business.Models.View
@using Microsoft.AspNetCore.Components.QuickGrid;
@using Concert.Business.Constants;
@using Data;

<PageTitle>Song requests</PageTitle>

@inject NavigationManager NavigationManager
@inject ISongRequestsRepository SongRequestRepository
@inject IWebApiExecuter WebApiExecuter

<h3>Song requests</h3>
<br />

@if(!string.IsNullOrEmpty(ErrorMessage))
{
    <div>
        <p class="text-danger">@ErrorMessage</p>
    </div>  
}
@if(songRequests is null)
{
    <div>
        <p><em>Loading...</em></p>
    </div>
}
else
{
    <div class="row">
        <div class="page-size-chooser col-2">
            Items per page:
            <select @bind="@paginationState.ItemsPerPage">
                <option>@FrontConstants.SONGREQUEST_ITEMS_PER_PAGE_OPTION_1</option>
                <option>@FrontConstants.SONGREQUEST_ITEMS_PER_PAGE_OPTION_2</option>
                <option>@FrontConstants.SONGREQUEST_ITEMS_PER_PAGE_OPTION_3</option>
            </select>
        </div>
        <div class="page-size-chooser col-2">
            <a href="/song-request" class="btn btn-primary">
                <i class="bi bi-plus-square"></i> Add Song request
            </a>
        </div>
    </div>
    <div class="grid">
        <QuickGrid Items="songRequests.AsQueryable()" Pagination="paginationState">
            <PropertyColumn Property="s => s.Artist" Sortable="true" IsDefaultSortColumn="true"></PropertyColumn>
            <PropertyColumn Property="s => s.Title" Sortable="true"></PropertyColumn>
            <PropertyColumn Property="s => s.Genre" Sortable="true"></PropertyColumn>
            <PropertyColumn Property="s => s.Language" Sortable="true"></PropertyColumn>
            <TemplateColumn>
                <a href="/song-request/@context.Id" class="btn btn-primary">
                    <i class="bi bi-pencil-square"></i> Edit
                </a>
            </TemplateColumn>
            <TemplateColumn>
                <ChildContent Context="songRequest">
                    <EditForm Model="songRequest"
                    FormName="@($"form-song-request-{songRequest.Id}")"
                    OnValidSubmit="@(async () => { await Delete(songRequest.Id); })">
                        <button type="submit" class="btn btn-danger">
                            <i class="bi bi-trash3"></i> Delete
                        </button>
                    </EditForm>
                </ChildContent>
            </TemplateColumn>
        </QuickGrid>
    </div>
    <Paginator State="paginationState"></Paginator>
} 

@code {
    private List<SongRequestView>? songRequests;
    private string? ErrorMessage;

    private PaginationState paginationState = new PaginationState { ItemsPerPage = FrontConstants.SONGREQUEST_ITEMS_PER_PAGE_OPTION_1 };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetAll();
        }
    }

    private async Task Delete(int id)
    {
        try
        {
            if (id > 0)
            {
                await WebApiExecuter.InvokeDelete($"songrequests/{id}");
                // Used to refresh the page
                await GetAll();
            }
        }
        catch (WebApiException ex)
        {
            // @todo handle exception
            ErrorMessage = ex?.ProblemDetails?.Title;
        }
    }

    private async Task GetAll()
    {
        try
        {
            songRequests = await WebApiExecuter.InvokeGet<List<SongRequestView>>("songrequests");
            ErrorMessage = string.Empty;
            StateHasChanged();
        }
        catch (WebApiException ex)
        {
            // @todo handle exception
            ErrorMessage = ex?.ProblemDetails?.Title;
        }
    }
}