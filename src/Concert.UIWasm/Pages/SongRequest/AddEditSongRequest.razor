@page "/song-request/{id:int?}"
@using Concert.Business.Models.View
@using Concert.UIWasm.Data

<PageTitle>Song requests - Add/Edit</PageTitle>

@inject NavigationManager NavigationManager
@inject IWebApiExecuter WebApiExecuter

@if (Id.HasValue)
{
    <h3>Edit Song request</h3>
}
else
{
    <h3>Add Song request</h3>
}
<br />
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div>
        <p class="text-danger">@errorMessage</p>
    </div>
}
else if (songRequest is null)
{
    <div>
        <p><em>Loading...</em></p>
    </div>
}
else
{
    <EditForm Model="songRequest" FormName="formSongRequest" OnValidSubmit="Submit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        @if (songRequest.Id > 0)
        {
            <InputNumber @bind-Value="songRequest.Id" hidden></InputNumber>
        }

        <FieldComponent Label="Artist">
            <Control>
                <InputText @bind-Value="songRequest.Artist" class="form-control"></InputText>
            </Control>
            <ValidationControl>
                <ValidationMessage For="() => songRequest.Artist"></ValidationMessage>
            </ValidationControl>
        </FieldComponent>
        <FieldComponent Label="Title">
            <Control>
                <InputText @bind-Value="songRequest.Title" class="form-control"></InputText>
            </Control>
            <ValidationControl>
                <ValidationMessage For="() => songRequest.Title"></ValidationMessage>
            </ValidationControl>
        </FieldComponent>
        <FieldComponent Label="Genre">
            <Control>
                <InputText @bind-Value="songRequest.Genre" class="form-control"></InputText>
            </Control>
            <ValidationControl>
                <ValidationMessage For="() => songRequest.Genre"></ValidationMessage>
            </ValidationControl>
        </FieldComponent>
        <FieldComponent Label="Language">
            <Control>
                <InputText @bind-Value="songRequest.Language" class="form-control"></InputText>
            </Control>
            <ValidationControl>
                <ValidationMessage For="() => songRequest.Language"></ValidationMessage>
            </ValidationControl>
        </FieldComponent>
        <br />
        @if (songRequest.Id > 0)
        {
            <button class="btn btn-primary" type="submit">Update</button>
        }
        else
        {
            <button class="btn btn-primary" type="submit">Save</button>
        }
        &nbsp;
        <a href="/song-requests" class="btn btn-primary">Close</a>
    </EditForm>
}

@code {
        [Parameter]
        public int? Id { get; set; }

    private string? errorMessage = string.Empty;

    [SupplyParameterFromForm]
    private SongRequestView? songRequest { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (Id.HasValue)
            {
                songRequest ??= await WebApiExecuter.InvokeGet<SongRequestView>($"songrequests/{this.Id.Value}");
            }
            else
            {
                songRequest ??= new SongRequestView();
            }
            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task Submit()
    {  
        try
        {
            if (songRequest is not null)
            {
                if (this.Id.HasValue)
                {
                    await WebApiExecuter.InvokePut<SongRequestView>($"songrequests/{this.Id.Value}", songRequest);
                }
                else
                {
                    await WebApiExecuter.InvokePost<SongRequestView>($"songrequests", songRequest);
                }
            }
            errorMessage = string.Empty;
            NavigationManager.NavigateTo("/song-requests");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            StateHasChanged();
        }
    }
}